#version 460

#define HBAR 

layout(local_size_x = 4, local_size_y = 4, local_size_z = 1) in;

layout (push_constant) uniform _constants {
    float deltaTime;
    float scale;
};

layout(binding = 0, RG32F) uniform readonly image2D inputState;
layout(binding = 1, RG32F) uniform writeonly image2D outputState;
#define GRIDSTEP (scale / imageSize(inputState).x)

//operatore di laplace (nabla prodotto scalare nabla) *
//d2S/dx2 + d2S/dy2
vec2 laplacian(vec2 state, ivec2 coord) {
    vec2 xP = (
        imageLoad(inputState, ivec2(coord.x + 1, coord.y)).xy
    );
    vec2 xM =  (
        imageLoad(inputState, ivec2(coord.x - 1, coord.y)).xy
    );
    vec2 yP = (
        imageLoad(inputState, ivec2(coord.x, coord.y + 1)).xy
    );
    vec2 yM =  (
        imageLoad(inputState, ivec2(coord.x, coord.y - 1)).xy
    );
    
    return (xP + xM + yP + yM - 4.0 * state) / (GRIDSTEP * GRIDSTEP);
    

}

float potentialF(ivec2 size, ivec2 coord) {
    if(coord.x <= 1 || coord.x + 1 >= size.x) {
        return 1;
    }
    if(coord.y <= 1 || coord.y + 1 >= size.y) {
        return 1;
    }
    if(length(coord - size / 2.0) < 20) 
        return 1;
    return 0;
}

vec2 initialState(ivec2 coord, ivec2 size) {
    if(coord.x > 82 && coord.x < 86 && coord.y < 156 && coord.y > 152) 
        return vec2(4, 0);
    return vec2(0);
}

void main() {
    
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(inputState);
    vec2 currentState = imageLoad(inputState, coord).xy;
    
    vec2 kinetic = laplacian(currentState, coord);
    vec2 potential = potentialF(size, coord) * currentState;
    vec2 change = vec2(potential.y - kinetic.y, kinetic.x - potential.x) ;


        imageStore(outputState, coord, vec4(currentState + change * deltaTime, 0, 0));

}